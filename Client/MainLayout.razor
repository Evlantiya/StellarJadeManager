@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using StellarJadeManager.Client.Authentication;
@using StellarJadeManager.Shared;

@inject AuthenticationStateProvider authStateProvider
@inject HttpClient http

@inherits LayoutComponentBase




<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="@theme" />
<MudDialogProvider FullWidth="false"
                   MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="false"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true"
                   />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Style="backdrop-filter: blur(4px)">

        <MudLink Href="/" Color="MudBlazor.Color.Primary" Underline="Underline.None">Stellar Jade Manager</MudLink>
        <MudSpacer/>
        <AuthorizeView>
            <NotAuthorized>
                <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="Variant.Text">
                    <MudButton>
                        <MudLink Href="/calculator" Underline="Underline.None">Калькулятор</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.Calculate" Size="MudBlazor.Size.Large" Class="ml-2"></MudIcon>
                    </MudButton>
                    <MudButton>
                        <MudLink Href="/warp" Underline="Underline.None">История круток</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.HistoryEdu" Size="MudBlazor.Size.Large" Class="ml-2"></MudIcon>
                    </MudButton>
                    <MudButton>
                        <MudLink Href="/auth" Underline="Underline.None">Войти</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.Login" Size="MudBlazor.Size.Large" Class="ml-2"></MudIcon>
                    </MudButton>
                </MudButtonGroup>
            </NotAuthorized>
            <Authorized>
                <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="Variant.Text">
                    <MudButton>
                        <MudLink Href="/calculator" Underline="Underline.None">Калькулятор</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.Calculate" Size="MudBlazor.Size.Large"  Class="ml-2"></MudIcon>
                    </MudButton>
                    <MudButton>
                        <MudLink Href="/warp" Underline="Underline.None">История круток</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.HistoryEdu" Size="MudBlazor.Size.Large" Class="ml-2"></MudIcon>
                    </MudButton>
                    <MudButton>
                        <MudLink Href="/profile" Underline="Underline.None">Профиль</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="MudBlazor.Size.Large"  Class="ml-2"></MudIcon>
                    </MudButton>
                </MudButtonGroup>
             
            </Authorized>

        </AuthorizeView>

    </MudAppBar>
    <MudMainContent>
            <CascadingValue Value="_profiles">
            <MudContainer Fixed Class="my-4 px-0 py-4 d-flex justify-center flex-column align-center ">
              
                @Body
            </MudContainer>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

    @code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<Shared.Profile> _profiles;

    public int currentGems {get;set;} = 3200;
    MudTheme theme = new MudTheme(){

        Palette = new PaletteLight()
        {},
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Amber.Darken2,
            @* Primary="#fbcd74", *@
            Secondary = Colors.Grey.Darken4,
            @* Tertiary = "#b187ff", *@
            TextPrimary = Colors.Grey.Lighten4,
            TextSecondary = Colors.Amber.Darken2,
            @* Background = Colors.Grey.Darken3, *@
            Background = "rgb(30,30,30)",
            @* AppbarBackground = Colors.Grey.Darken4, *@
            AppbarBackground = "rgba(10,10,10,.8)",
            DrawerBackground = Colors.Grey.Darken4,
            DrawerText = Colors.Grey.Lighten4,
            Surface = "rgba(20,20,20,1)",
        },
    };

    bool _drawerOpen = false;
    bool _isDarkMode = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        GetUserProfileIfAuthorized(AuthenticationStateTask);
        authStateProvider.AuthenticationStateChanged += GetUserProfileIfAuthorized;
    }

    private async void GetUserProfileIfAuthorized(Task<AuthenticationState> task)
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user?.Identity.IsAuthenticated ?? false)
        {
            var jwt = await ((CustomAuthenticationStateProvider)authStateProvider).GetToken();
            http.DefaultRequestHeaders.Add("Authorization", $"Bearer {jwt}");

            var response = await http.GetStringAsync("api/profile/list");

            _profiles = JsonConvert.DeserializeObject<List<Shared.Profile>>(response);
            StateHasChanged();

        }
    }

}