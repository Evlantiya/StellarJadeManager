@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using StellarJadeManager.Client.Authentication;
@using StellarJadeManager.Shared;

@inject AuthenticationStateProvider authStateProvider
@inject HttpClient http

@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="@theme" />
<MudDialogProvider FullWidth="false"
                   MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="false"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true"
                   />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar>
        @*

        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        *@
        <MudText  Color="MudBlazor.Color.Primary">Stellar Jade Manager</MudText>
        <MudSpacer/>
        
        @* <MudTextField Style="width:100px" Class="mx-2" FullWidth="false" @bind-Value='currentGems' T="int" Variant="Variant.Outlined"/> *@
        

        <AuthorizeView>
            <NotAuthorized>
                <MudLink Href="/auth" Underline="Underline.None">Регистрация/Войти</MudLink>
            </NotAuthorized>
            <Authorized>
                <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="Variant.Outlined">
                    <MudButton>
                        <MudLink Href="/" Underline="Underline.None">Калькулятор</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.Calculate" Size="MudBlazor.Size.Large"  Class="ml-2"></MudIcon>
                    </MudButton>
                    <MudButton>
                        <MudLink Href="/warp" Underline="Underline.None">История круток</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.HistoryEdu" Size="MudBlazor.Size.Large" Class="ml-2"></MudIcon>
                    </MudButton>
                    <MudButton>
                        <MudLink Href="/profile" Underline="Underline.None">Профиль</MudLink>
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="MudBlazor.Size.Large"  Class="ml-2"></MudIcon>
                    </MudButton>
                </MudButtonGroup>
                @*
                <MudImage Width="32" Height="32" Src="images/stellarJade.webp"></MudImage>
                <MudTooltip>
                    <ChildContent>
                       <p class="mr-6">@_profiles?.First()?.CurrentJades</p>
                        <p class="mr-6">@_profiles?.First()?.ProfileName</p>
                    </ChildContent>
                    <TooltipContent>
                        <div class="d-flex flex-row">
                            <MudImage Width="20" Height="20" Src="images/warp.webp"></MudImage>
                            <MudText>@(currentGems/160)</MudText>
                        </div>
                    </TooltipContent>
                </MudTooltip>
            <MudAvatar>
                <MudImage Class="align-self-end" Src="images/429_Mkht.jpg"></MudImage>
            </MudAvatar>
                *@
            </Authorized>

        </AuthorizeView>

    </MudAppBar>
    @*

    <MudDrawer @bind-Open="@_drawerOpen">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">MAIN</MudNavLink>
            <MudNavLink Href="/auth" Match="NavLinkMatch.Prefix">AUTH</MudNavLink>
            <MudNavLink Href="/about"  Match="NavLinkMatch.Prefix">About</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    *@
    <MudMainContent>
            <CascadingValue Value="_profiles">
            <MudContainer MaxWidth="@MaxWidth.Large" Color="MudBlazor.Color.Primary" Class="my-4 px-0 py-4 d-flex justify-center flex-column align-center ">
                @Body
            </MudContainer>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

    @code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<Shared.Profile> _profiles;

    public int currentGems {get;set;} = 3200;
    MudTheme theme = new MudTheme(){

        Palette = new PaletteLight()
        {
            @* Primary = Colors.Grey.Darken4,
            Secondary = Colors.Amber.Darken2,
            TextPrimary = Colors.Grey.Lighten4,
            TextSecondary = Colors.Amber.Darken2,
            Background = Colors.Grey.Darken3,
            AppbarBackground = Colors.Grey.Darken4,
            DrawerBackground = Colors.Grey.Darken4,
            DrawerText = Colors.Grey.Lighten4 *@

    },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Amber.Darken2,
            Secondary = Colors.Grey.Darken4,
            TextPrimary = Colors.Grey.Lighten4,
            TextSecondary = Colors.Amber.Darken2,
            Background = Colors.Grey.Darken3,
            AppbarBackground = Colors.Grey.Darken4,
            DrawerBackground = Colors.Grey.Darken4,
            DrawerText = Colors.Grey.Lighten4,
            Surface = Colors.Grey.Darken4,
        },
    };

    bool _drawerOpen = false;
    bool _isDarkMode = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        GetUserProfileIfAuthorized(AuthenticationStateTask);
        authStateProvider.AuthenticationStateChanged += GetUserProfileIfAuthorized;
    }

    private async void GetUserProfileIfAuthorized(Task<AuthenticationState> task)
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user?.Identity.IsAuthenticated ?? false)
        {
            var jwt = await ((CustomAuthenticationStateProvider)authStateProvider).GetToken();
            http.DefaultRequestHeaders.Add("Authorization", $"Bearer {jwt}");

            var response = await http.GetStringAsync("api/profile/list");

            _profiles = JsonConvert.DeserializeObject<List<Shared.Profile>>(response);
            StateHasChanged();

        }
    }

}