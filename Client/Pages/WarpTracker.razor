@using StellarJadeManager.Client.Components.WarpImport
@page "/warp"
@inject IDialogService DialogService


<PageTitleWithEmote PageTitle="История круток" ImgPath="images/emotes/Jingliu 3.png"></PageTitleWithEmote>
<MudGrid Spacing="2" Justify="Justify.Center" Style="width:80%; max-width:1280px">
    <MudItem xs="12" sm="12" md="8" lg="8">
        <BannerInfoCard
            BannerInfo="@CurrentBannerInfos.First(b => b.BannerTypeId == (int)BannerTypeEnum.EVENT)"
            ImageSrc="/Images/characters-full/1306.png">
        </BannerInfoCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="4" lg="4">
        <BannerInfoCard 
            BannerInfo="@CurrentBannerInfos.First(b => b.BannerTypeId == (int)BannerTypeEnum.LIGHTCONE)"
            ImageSrc="/Images/lightcones/Light_Cone_Earthly_Escapade_Artwork.png">
        </BannerInfoCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="6" lg="6">
        <BannerInfoCard 
            BannerInfo="@CurrentBannerInfos.First(b => b.BannerTypeId == (int)BannerTypeEnum.STANDART)"
            ImageSrc="/Images/characters-full/1004.png">
        </BannerInfoCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="6" lg="6">
        <BannerInfoCard 
            BannerInfo="@CurrentBannerInfos.First(b => b.BannerTypeId == (int)BannerTypeEnum.DEPARTURE)"
            ImageSrc="/Images/characters-full/trailblazer.png">
        </BannerInfoCard>
    </MudItem>
</MudGrid>
<MudButton Class="my-5" Color="MudBlazor.Color.Primary" Variant="Variant.Filled" OnClick="OpenImportDialog">Импортировать</MudButton>

@code {

    [CascadingParameter]
    List<Shared.Profile> profiles { get; set; }

    private List<UserBannerInfo> defaultInfos = UserBannerInfo.CreateDefaultBannerInfos();

    public List<UserBannerInfo> CurrentBannerInfos => GetCurrentBannerInfos() ;


    private List<UserBannerInfo> GetCurrentBannerInfos()
    {
        if( (profiles?.Count ?? 0) == 0 || (profiles?[0]?.UserBannerInfos?.Count ?? 0) == 0 ){
            return defaultInfos;
        }
        else{
            return profiles[0].UserBannerInfos.ToList();
        }
    }

    private void SetCurrentBannerInfos(List<UserBannerInfo> userBannerInfos)
    {
        if ((profiles?.Count ?? 0) == 0 || (profiles?[0]?.UserBannerInfos?.Count ?? 0) == 0)
        {
            defaultInfos = userBannerInfos;
        }
        else
        {
            profiles[0].UserBannerInfos = userBannerInfos;
        }
    }

    private async Task OpenImportDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "dialog-background" };
        var parameters = new DialogParameters<ImportDialog> { { x => x.UserBannerInfos, CurrentBannerInfos } };
        var dialog = await DialogService.ShowAsync<ImportDialog>("Импорт", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var bannerInfos = JsonConvert.DeserializeObject<List<UserBannerInfo>>(result.Data.ToString());
            SetCurrentBannerInfos(bannerInfos);
            StateHasChanged();
        }
    }

}
