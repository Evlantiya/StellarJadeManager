@page "/calculator"
@using StellarJadeManager.Client.Components.MainPage
@using System.Text

@inject HttpClient Http
@inject IMapper _mapper
@inject AuthenticationStateProvider authStateProvider

<PageTitleWithEmote PageTitle="Калькулятор" ImgPath="images/emotes/Dr. Ratio 3.png"></PageTitleWithEmote>
<MudContainer Fixed Class="d-flex flex-wrap justify-center align-start my-5 gap-10">
    <Calendar
        patches="patches"
        OnSelectedDateChanged="UpdateSelectedDate"
        currentProfile="profiles?.FirstOrDefault()??defaultProfile"
    ></Calendar>
    <Calculator
        @ref="calc"
        patches="patches"
        chances="chances"
        CurrentProfile="profiles?.FirstOrDefault()??defaultProfile"
        OnProfileDataChanged="UpdateProfileData"
    ></Calculator>
</MudContainer>
<Graphs @ref="graphs"></Graphs>



@code{
    private Graphs graphs;
    private Calculator calc;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [CascadingParameter]
    List<Shared.Profile> profiles { get; set; }

    Shared.Profile defaultProfile = new Shared.Profile();


    public Dictionary<int, double> chances = new();
    public List<PatchDTO> patches;

    public async Task UpdateProfileData(ProfilePutRequestDTO profile){
        if(profiles==null || profiles.Count<1){
            return;
        }
        await UpdateProfile(profiles[0].Id, profile);
    }

    public async Task UpdateSelectedDate(DateTime selectedDate){
        if(profiles==null || profiles.Count<1){
            return;
        }
        //profiles[0].SelectedDate = selectedDate;
        await UpdateProfile(profiles[0].Id, new ProfilePutRequestDTO() { SelectedDate = selectedDate });
    }

    //public async Task UpdateGraphs(int value)
    //{
    //    await graphs.UpdateRollnumMarkerAsync(value);
    //}


    public async Task UpdateProfile(int id, ProfilePutRequestDTO profile){
        chances = new(){
            {1,2},{2,2}
        };
        if(profile==null){
            return;
        }
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user?.Identity.IsAuthenticated ?? false)
        {
            var json = JsonConvert.SerializeObject(profile);
            var jsonContent = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await Http.PutAsync($"api/profile/{id}", jsonContent);
            var json_response = await response.Content.ReadAsStringAsync();
            @* StateHasChanged(); *@

        }
    }

    protected override async Task OnInitializedAsync(){
        //симуляция сервака с мл, коэфы регрессии
        var const_a = -3623.0/850; 
        var b = 497.0/8500;
        for (int roll_num = 1;roll_num <= 90; roll_num++){
            if(roll_num == 90){
                chances.Add(roll_num, 1);
            }
            else if(roll_num < 74){
                chances.Add(roll_num, 0.006);
            }
            else{
                chances.Add(roll_num, b*roll_num + const_a);
            }
        }   
        patches = await Http.GetFromJsonAsync<List<PatchDTO>>("/api/patches") ?? new();
        StateHasChanged();

    }
 }