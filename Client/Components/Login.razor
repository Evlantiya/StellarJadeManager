@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json;
@using System.Text;
@using StellarJadeManager.Client.Authentication;


@inject HttpClient http
@inject Supabase.Client supabaseClient
@inject AuthenticationStateProvider authStateProvider

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Login</MudText>
    <EditForm Model="@userModel" OnValidSubmit="HandleLogin">
        <MudTextField @bind-Value="userModel.Email"  Label="Email" For="@(() => userModel.Email)" FullWidth />
        <MudTextField @bind-Value="userModel.Password" Label="Password" For="@(() => userModel.Password)" FullWidth InputType="InputType.Password" />
        <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Login</MudButton>
    </EditForm>
</MudPaper>

@code {

    [Parameter]
    public EventCallback OnSinginIn { get; set; }

    private UserModel userModel = new UserModel();

    private async Task HandleLogin()
    {
        var json = JsonConvert.SerializeObject(userModel);
        var jsonContent = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await http.PostAsync("/api/user/login", jsonContent);
        var json_response = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            var session = JsonConvert.DeserializeObject<UserSession>(json_response);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(session);
            await OnSinginIn.InvokeAsync();

        }
        else
        {
            Console.WriteLine(json_response);
        }
    }

    public class UserModel
    {
        [EmailAddress]
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
