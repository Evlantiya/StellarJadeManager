@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json;
@using System.Text;
@using StellarJadeManager.Client.Authentication;
@inject NavigationManager Navigation


@inject HttpClient http
@inject AuthenticationStateProvider authStateProvider

<MudContainer Class="d-flex justify-center flex-column align-center" Style="with:50%; height:100%">
    <MudText Typo="Typo.h4">Вход</MudText>
    <EditForm Model="@userModel" OnValidSubmit="HandleLogin">
        <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column justify-space-around">
            <MudTextField @bind-Value="userModel.Email"  Label="Email" For="@(() => userModel.Email)" FullWidth Class="my-2" />
            
            <MudTextField @bind-Value="userModel.Password" Label="Password" For="@(() => userModel.Password)" Class="my-2" FullWidth InputType="InputType.Password" />
            <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary" Class="my-2" Variant="Variant.Filled">Войти</MudButton>
            <MudText Color="MudBlazor.Color.Error">@errorMsg</MudText>
        </MudContainer>
    </EditForm>
</MudContainer>

@code {

    [Parameter]
    public EventCallback OnSinginIn { get; set; }

    public string errorMsg = "";
    private UserModel userModel = new UserModel();

    private async Task HandleLogin()
    {
        var json = JsonConvert.SerializeObject(userModel);
        var jsonContent = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await http.PostAsync("/api/user/login", jsonContent);
        var json_response = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            errorMsg = "";
            var session = JsonConvert.DeserializeObject<UserSession>(json_response);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(session);
            StateHasChanged();
            Navigation.NavigateTo("/");

        }
        else
        {
            errorMsg = json_response;
        }
    }

    public class UserModel
    {
        [EmailAddress]
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
