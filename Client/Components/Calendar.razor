@inject HttpClient Http


@if(isParametersSet && patches != null && patches.Count > 1){
    var currentPatch = patches.First(p => p.ReleaseDate.AddDays(7 * p.WeeksCount) > DateTime.Now);
    var selectedIndex = patches.IndexOf(currentPatch);
    <MudCarousel Class="mud-width-full" Style="height:340px;" ShowArrows="@true" ShowBullets="@false" EnableSwipeGesture="@true" AutoCycle="@false" TData="object" @bind-SelectedIndex="selectedIndex">
        @foreach(var p in patches)
        {
            <MudCarouselItem Transition="@Transition.Fade">
                <VersionBanner title="@p.Title" version="@p.Version"></VersionBanner>
            </MudCarouselItem>
        }
    </MudCarousel>
    var selectedPatch = patches[selectedIndex];
    <div class="mt-4 mb-8 mx-auto calendar-container">
        @for(int i=0; i < selectedPatch.WeeksCount*7; i++){
            var currentDate = selectedPatch.ReleaseDate.AddDays(i);

            var disabled = currentDate < DateTime.Today;
            var today = currentDate == DateTime.Today;
            var color_hren = "";
            if(currentDate == selectedDate){
                Console.WriteLine(currentDate.ToString());
                color_hren = Colors.Amber.Darken3;
            }
            else if(today){
                color_hren = Colors.Red.Darken1;
            }
            else if(currentDate>DateTime.Today && currentDate < selectedDate){
                @* color_hren = Colors.Grey.Darken3; *@
                color_hren = Colors.Amber.Darken1;
            }
            else{
                color_hren= MudBlazor.Color.Tertiary.ToString();
            }
            <MudButton Style="@($"border-radius:0; background:{color_hren}")"
            Disabled="disabled" Variant="disabled ? Variant.Outlined : Variant.Filled" OnClick="@(e =>SetSelectedDate(currentDate))">
                @currentDate.ToString("dd/M", System.Globalization.CultureInfo.InvariantCulture)
            </MudButton>

        }
    </div>
}

@code{
    private bool isParametersSet = false;
    @* private List<Patch> patchesInit {get; set;}  *@
    [Parameter]
    public List<PatchDTO> patches { get; set;}

    //private int selectedIndex = 0;
    public DateTime selectedDate {get; set;} = DateTime.Today;
    [Parameter]
    public EventCallback<DateTime> OnSelectedDateChanged {get; set;}
    //public Patch currentPatch {get; set;} = null!;

    private async Task SetSelectedDate(DateTime date){
        if (date >= DateTime.Today){
            selectedDate=date;
            await OnSelectedDateChanged.InvokeAsync(selectedDate);  
        } 
            
    }

    protected override void OnParametersSet(){
        isParametersSet=true;
    }
    //protected override async Task OnInitializedAsync()
    //{
    //    patchesInit = await Http.GetFromJsonAsync<List<Patch>>("/api/patches") ?? new();
    //    currentPatch = patches.First(p => p.ReleaseDate.AddDays(7*p.WeeksCount) > DateTime.Now);
    //    selectedIndex = patches.IndexOf(currentPatch);    
    //}
}