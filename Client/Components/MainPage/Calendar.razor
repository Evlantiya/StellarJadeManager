
@if (patches != null)
{
    
    @* <MudCarousel Class="my-5" Style="width:50%; height:35vh;" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="@true" AutoCycle="false" TData="object" @bind-SelectedIndex="selectedIndex">
        @foreach (var p in patches)
        {
            
            <MudCarouselItem Transition="@Transition.Fade" Class="d-flex flex-column justify-center align-center" Style="height: 35vh;">
                
                <div class="d-flex" style="height: 100%;">

                <MudImage
                    ObjectFit="@ObjectFit.ScaleDown"
                    ObjectPosition="@ObjectPosition.Top" 
                    Src="@($"images/{p.Version.Replace('.','_')}.webp")"
                    onerror="this.src='images/1_0.webp';" 
                    Alt="Mony the dog" Elevation="25" Class="mx-auto my-auto rounded-lg" Style="width:100%;height:100%;"
                />
                </div>
            </MudCarouselItem>
        }
    </MudCarousel> *@
    <MudTabs Elevation="4" Rounded="true" Outlined="true" @bind-ActivePanelIndex="selectedIndex">
        @foreach (var p in patches)
        {
            <MudTabPanel Text="@p.Version">
                <div class="calendar-container">
                    @for (int i = 0; i < p.WeeksCount * 7; i++)
                    {
                        var currentDate = p.ReleaseDate.AddDays(i);

                        var disabled = currentDate < DateTime.Today;
                        var today = currentDate == DateTime.Today;
                        var color_hren = "";
                        if (currentDate == selectedDate)
                        {
                            Console.WriteLine(currentDate.ToString());
                            color_hren = Colors.Amber.Darken3;
                        }
                        else if (today)
                        {
                            color_hren = Colors.Red.Darken1;
                        }
                        else if (currentDate > DateTime.Today && currentDate < selectedDate)
                        {
                            @* color_hren = Colors.Grey.Darken3; *@
                            color_hren = Colors.Amber.Darken1;
                        }
                        else
                        {
                            color_hren = MudBlazor.Color.Tertiary.ToString();
                        }
                        <MudButton Style="@($"border-radius:0; background:{color_hren}; aspect-ratio: 1; min-width:0;")"
                       Disabled="disabled" Variant="disabled ? Variant.Outlined : Variant.Filled" OnClick="@(e =>SetSelectedDate(currentDate))">
                            @currentDate.ToString("dd/M", System.Globalization.CultureInfo.InvariantCulture)
                        </MudButton>

                    }
                </div>
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    [Parameter]
    public List<PatchDTO> patches { get; set; }

    [Parameter]
    public Shared.Profile currentProfile { get; set; }


    public DateTime selectedDate => currentProfile?.SelectedDate ?? DateTime.Today;

    [Parameter]
    public EventCallback<DateTime> OnSelectedDateChanged { get; set; }

    public int selectedIndex;

    private async Task SetSelectedDate(DateTime date)
    {
        if (currentProfile!=null && date >= DateTime.Today && date != selectedDate )
        {
            currentProfile.SelectedDate = date;
            await OnSelectedDateChanged.InvokeAsync(date);
        }

        @* logger.LogInformation($"Button on calendar clicked wit date {date}"); *@
    }
}
