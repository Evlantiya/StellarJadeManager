@using System.Text;
@inject HttpClient Http

<div class="d-flex flex-column justify-start">

    <MudTextField T="DateTime" ReadOnly="@true"  Label="Выбранная дата" Value="selectedDate" ValueChanged="UpdateSelectedDate" />
        <MudTextField @bind-Value='stellarJadesAmountForEvents' T="int" Label="Гемов за ивенты"   />
    <MudTextField T="int" Value="currentGems" ValueChanged="UpdateCurrentGems"  Label="Текущее количество гемов" />
        <MudSelect T="int" Label="Звезд в зеркале" AnchorOrigin="Origin.BottomCenter" Value="MoC_stars" ValueChanged="UpdateMoC">
            @for(int i=0; i<13;i++){
                <MudSelectItem  T="int" Value="i*3" />
            }
        </MudSelect>
        <MudSelect T="int" Label="Звезд в чистом вымысле" AnchorOrigin="Origin.BottomCenter" Value="PF_stars" ValueChanged="UpdatePF">
            @for(int i=0; i<13;i++){
                <MudSelectItem  T="int" Value="i*3" />
            }
        </MudSelect>
    <MudCheckBox T="bool" Checked="@month_pass" CheckedChanged="UpdateMonthPass" Label="Пропуск снабженца" Color="MudBlazor.Color.Primary" />
    <MudCheckBox T="bool" Checked="@Garant" CheckedChanged="UpdateGarant" Label="Гарант" Color="MudBlazor.Color.Primary" />
    <MudDivider Class=mt-5 />

    <div class="d-flex flex-column justify-center align-center my-5">
        <div class="ml-16">
            <MudText
            Typo="Typo.h5"
            Align="@MudBlazor.Align.Start"
            Class="mx-auto">
                Итого звездного нефрита
            </MudText>
            <div class="d-flex flex-row">
                <MudImage Width="32" Height="32" Src="images/stellarJade.webp"></MudImage>
                <MudText Typo="Typo.h5" Class="mr-4" Color="MudBlazor.Color.Primary">@(resultStellarJades)</MudText>
                <MudText Typo="Typo.h5" Class="mr-4">=</MudText>
                <MudImage Width="32" Height="32" Src="images/warp.webp"></MudImage>
                <MudText Typo="Typo.h5" Class="mr-4" Color="MudBlazor.Color.Primary">@(resultStellarJades/160)</MudText>
                <MudImage Width="32" Height="32" Src="images/stellarJade.webp"></MudImage>
                <MudText Typo="Typo.h5" Class="mr-4" Color="MudBlazor.Color.Primary">@(resultStellarJades%160)</MudText>
            </div>
        </div>
        <div class="d-flex gap-1 align-center mt-5" >
            @if(chances != null && chances.Count()==90){
                <MudText Typo="Typo.h5" Align="@MudBlazor.Align.Start" Class="mx-auto">
                        Шанс:
                 </MudText>
                @if (resultStellarJades / 160 <= 0)
                {
                    <MudText Typo="Typo.h5" Align="@MudBlazor.Align.Start" Class="mx-auto" Color="MudBlazor.Color.Primary">
                        0.0%
                    </MudText>
                }
                @if (resultStellarJades/160 >= 90)
                {
                    <MudText Typo="Typo.h5" Align="@MudBlazor.Align.Start" Class="mx-auto" Color="MudBlazor.Color.Primary">
                        @((Garant ? 100 : 58))%
                    </MudText>
                }
            @if (resultStellarJades / 160 > 0 && resultStellarJades / 160 < 90)
            {
                <MudText Typo="Typo.h5" Align="@MudBlazor.Align.Start" Class="mx-auto" Color="MudBlazor.Color.Primary">
                        @(Math.Round(ConstChances.Cumulative_chances[(resultStellarJades / 160)] * (Garant ? 1 : 0.58), 2))%
                </MudText>
            }
            }
        </div>
    </div>

</div>
@code{

    [Parameter]
    public List<PatchDTO> patches {get; set;}

    [Parameter]
    public Dictionary<int, double> chances {get; set;}

    [Parameter]
    public Shared.Profile CurrentProfile { get; set; }


    public int currentGems => CurrentProfile?.CurrentJades ?? 0;

    public DateTime selectedDate => CurrentProfile?.SelectedDate ?? DateTime.Today;

    public bool month_pass => CurrentProfile?.SupplyPass ?? false;

    private bool garant = false;
    public bool Garant
    {
        get{
            return CurrentProfile?.UserBannerInfos.FirstOrDefault(x=>x.BannerTypeId==11)?.GuaranteedLegendary ?? garant;
        }
        set{
            if (CurrentProfile?.UserBannerInfos.FirstOrDefault(x => x.BannerTypeId == 11)?.GuaranteedLegendary != null)
            {
                CurrentProfile.UserBannerInfos.First(x => x.BannerTypeId == 11).GuaranteedLegendary = value;
            }
            else
            {
                garant = value;
            }
        }
    }

    public int MoC_stars => CurrentProfile?.MoCStars ?? 0;

    public int PF_stars => CurrentProfile?.PfStars ?? 0;

    [Parameter]
    public EventCallback<ProfilePutRequestDTO> OnProfileDataChanged {get;set;}

    //[Parameter]
    //public EventCallback<int> OnResultStellarJadesAmountChanged { get; set; }

    public int dailyIncom {get {
            return month_pass ? 150 : 60;
        }}
    public int stellarJadesAmountForEvents {get; set;} = 0;
    public int resultStellarJades => currentGems + stellarJadesAmountForEvents + MoC_stars * 20 + PF_stars*20 + (selectedDate - DateTime.Today).Days * dailyIncom;


    public async Task UpdateCurrentGems(int value){
        CurrentProfile.CurrentJades = value;
        await UpdateProfile(_currentGems:value);
    }
    public async Task UpdateSelectedDate(DateTime value){
        CurrentProfile.SelectedDate = value;
        await UpdateProfile(_selectedDate:value);
    }

    public async Task UpdateGarant(bool value)
    {
        Garant = value;
    }

    public async Task UpdateMonthPass(bool value){
        CurrentProfile.SupplyPass = value;
        await UpdateProfile(_month_pass:value);
    }
    public async Task UpdateMoC(int value){

        CurrentProfile.MoCStars = value;
        await UpdateProfile(_MoC_stars:value);
    }
    public async Task UpdatePF(int value){
        CurrentProfile.PfStars = value;
        await UpdateProfile(_PF_stars:value);
    }
    //i wanna kms
    //public async Task FireOnResultStellarJadesAmountChangedEvenAsync(){
    //    await OnResultStellarJadesAmountChanged.InvokeAsync(resultStellarJades);
    //}

    public async Task UpdateProfile(int? _currentGems = null, DateTime? _selectedDate= null, bool? _month_pass= null, int? _MoC_stars= null, int? _PF_stars = null){
        
        @* if(_currentGems != null){
            currentGems = _currentGems ?? 0;
        }
        if(_selectedDate != null){
            selectedDate = _selectedDate ?? DateTime.Today;
        }
        if(_month_pass != null){
            month_pass = _month_pass ?? false;
        }
        if(_MoC_stars != null){
            MoC_stars = _MoC_stars ?? 0;
        }
        if(_PF_stars != null){
            PF_stars = _PF_stars ?? 0;
        } *@


        var data = new ProfilePutRequestDTO(){
            CurrentJades=_currentGems,
            SelectedDate = _selectedDate,
            SupplyPass = _month_pass,
            MoCStars = _MoC_stars,
            PfStars = _PF_stars
        };
        await OnProfileDataChanged.InvokeAsync(data);
        //await OnResultStellarJadesAmountChanged.InvokeAsync(resultStellarJades);
    }

    string warp_url = "";


    private async Task Test(){

        @* var content = new StringContent(warp_url, Encoding.UTF8, "text/plain"); *@
        var hren = await Http.PostAsJsonAsync<string>("/api/warp/parse", warp_url);

    }
    @* public void set_checkbox(bool value)
    {
        month_pass = value;
    } *@
    
    
    private int calculateEventStellarJadeBySelectedDate(){
        int result = 0;
        var dateRange = new EventDateRange(DateTime.Today, selectedDate);

        foreach(var patch in patches.Where(p => selectedDate >= p.ReleaseDate)){
            foreach(var patchEvent in patch.Events){
                //рефактор модели ивента, посчитать через сколько дней доступны все награды
                if(dateRange.IsDateInRange(patchEvent.StartDate.AddDays(7))){ //если прошло больше недели с начала ивента и открылись все награды
                    result+=patchEvent.StellarJadesAmount;
                }
            }
        }
        return result;
    }
}