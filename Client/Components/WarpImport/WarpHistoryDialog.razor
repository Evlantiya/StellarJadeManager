<MudDialog Style="overflow-y: auto;max-height: 100dvh;scrollbar-gutter: stable;">
    <DialogContent>
        <MudContainer Fixed Class="my-4 mb-10">
        <div style="position:sticky;top:0;z-index:10;display:flex;width:fit-content;" >
        <MudButton OnClick="Test">TEST</MudButton>
        <MudToggleIconButton
            @bind-Toggled="@LegendaryFilter"
            Icon="@Icons.Material.Filled.StarOutline" Color="@MudBlazor.Color.Primary" 
            ToggledIcon="@Icons.Material.Filled.Star" ToggledColor="@MudBlazor.Color.Primary"
        />

        <MudToggleIconButton 
            @bind-Toggled="@EpicFilter"
            Icon="@Icons.Material.Filled.StarOutline" Color="@MudBlazor.Color.Tertiary" 
            ToggledIcon="@Icons.Material.Filled.Star" ToggledColor="@MudBlazor.Color.Tertiary" 
        />

        <MudToggleIconButton @bind-Toggled="@CommonFilter"
            Icon="@Icons.Material.Filled.StarOutline"  
            ToggledIcon="@Icons.Material.Filled.Star" Style="color:rgb(82, 147, 250)" 
        />

        <div class="d-flex justify-center align-start flex-wrap">
            @foreach(var id in BannerIdList){
                <MudButton 
                OnClick="@(e=>SetSelectedBannerId(id))"
                Variant="SelectedBannerId == id ? Variant.Outlined : Variant.Filled"
                Class="pa-0"
                 >
                 <MudImage
                    ObjectFit="@ObjectFit.ScaleDown"
                    ObjectPosition="@ObjectPosition.Top" 
                    Src="@(GetImageURLById("banner-ticket",id))"
                    onerror="this.src='images/1_0.webp';" 
                    Alt="@id.ToString()" Elevation="25" Class="@GetTicketOffClass(id)"/>
                 </MudButton>
            }
        </div>
        </div>
        <MudDataGrid 
            T="Warp" 
            SortMode="SortMode.None" 
            Items="@BannerInfo.Warps.Where(WarpFilter).Reverse()"
            RowStyleFunc="@_rowStyleFunc"
        >
            <Columns>
                <PropertyColumn Property="warp => warp.Time" Title="Время" />
                <PropertyColumn CellStyleFunc="@_cellStyleFunc" Property="warp => warp.Pity" Title="Pity"/>
                <PropertyColumn Property="warp => warp.Guarantee" Title=""/>
                <PropertyColumn Property="warp => warp.Name" Title="Имя"/>
                <PropertyColumn Property="warp => warp.RankType"Title="Редкость" />
                <PropertyColumn Property="warp => warp.ItemType" Title="Тип" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                    
                        @($"{context.Item.Pity} {context.Item.Guarantee}")
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            @* <PagerContent>
                <MudDataGridPager  T="Warp" />
            </PagerContent> *@
        </MudDataGrid>
        </MudContainer>
    </DialogContent>
</MudDialog>

<style>
    .ticket{
        width:7rem;
        background-size: cover;
        background-repeat: no-repeat;
    }

    .ticket-off{
        filter: brightness(0.5);
    }
</style>

@code{
    [CascadingParameter]
     MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UserBannerInfo BannerInfo {get;set;}

    public void Test(){
        Console.WriteLine("test");
    }

    private HashSet<int> _raritySet = new HashSet<int>(){4,5};
    
    private bool legendaryFilterOn = true;
    private bool epicFilterOn = true;
    private bool commonFilterOn = false;

    public bool LegendaryFilter
    {
        get => legendaryFilterOn;
        set
        {
            legendaryFilterOn = value;
            if (value) _raritySet.Add(5);
            else _raritySet.Remove(5);
            @* ResetFilterIfNoneSelected(); *@
        }
    }
    public bool EpicFilter
    {
        get => epicFilterOn;
        set
        {
            epicFilterOn = value;
            if (value) _raritySet.Add(4);
            else _raritySet.Remove(4);
            @* ResetFilterIfNoneSelected(); *@
        }
    }
    public bool CommonFilter
    {
        get => commonFilterOn;
        set
        {
            commonFilterOn = value;
            if (value) _raritySet.Add(3);
            else _raritySet.Remove(3);
            @* ResetFilterIfNoneSelected(); *@
        }
    }

    public int? SelectedBannerId {get;set;} = null;
    public List<int> BannerIdList;


    public HashSet<int> RaritySet => _raritySet;

    Func<Warp, bool> WarpFilter;
    Func<Warp, bool> rarityPredicate;
    Func<Warp, bool> bannerIdPredicate;

    private Func<Warp, string> _cellStyleFunc => x =>
    {
        string style = "text-align:end;";

        if(x.RankType == 5){
            style += $"color:{GetColor(x?.Pity??1,90)};";
        }
        if(x.RankType == 4){
            style += $"color:{GetColor(x?.Pity??1,10)};";
        }

        return style;
    };
    private Func<Warp, int, string> _rowStyleFunc => (x, i) =>
    {
        string style = "";

        if(x.RankType == 5){
            style += "background-image:linear-gradient(to right, rgba(0, 0, 0, 0), rgba(251, 205, 116, 0.4) 40%, rgba(0, 0, 0, 0));";
        }
        if(x.RankType == 4){
            style += "background-image:linear-gradient(to right, rgba(0, 0, 0, 0), rgba(176, 135, 255, 0.4) 40%, rgba(0, 0, 0, 0));";
        }

        return style;
    };

    private string GetColor(int value, int endValue)
    {
        // Рассчитываем красный и зеленый компоненты цвета
        @* int red = (int)(255 * ((double)value / endValue));
        int green = (int)(255 * (1 - ((double)value / endValue)));
        return $"rgb({red}, {green}, 0)"; *@
        if (value < 1) value = 1;
        if (value > endValue) value = endValue;

        // Зеленый цвет
        byte r1 = 0;
        byte g1 = 255;
        byte b1 = 0;

        // Желтый цвет
        byte r2 = 255;
        byte g2 = 255;
        byte b2 = 0;

        // Красный цвет
        byte r3 = 255;
        byte g3 = 0;
        byte b3 = 0;

        byte r, g, b;

        if (value <= (endValue/2)) // От зеленого к желтому
        {
            r = (byte)((r2 - r1) * (value - 1) / ((endValue/2) - 1) + r1);
            g = (byte)((g2 - g1) * (value - 1) / ((endValue/2) - 1) + g1);
            b = b1; // b2 и b1 равны, поэтому можно использовать b1
        }
        else // От желтого к красному
        {
            r = r2; // r3 и r2 равны, поэтому можно использовать r2
            g = (byte)((g3 - g2) * (value - (endValue/2)-1) / (endValue - (endValue/2)-1) + g2);
            b = (byte)((b3 - b2) * (value - (endValue/2)-1) / (endValue - (endValue/2)-1) + b2);
        }

        return $"rgb({r}, {g}, {b})";
    }

    protected override async Task OnInitializedAsync()
    {
        rarityPredicate = x => RaritySet.Contains(x.RankType);
        bannerIdPredicate = x => SelectedBannerId == null ? true : x.GachaId==SelectedBannerId;
        WarpFilter = CombinePredicates(rarityPredicate,bannerIdPredicate);
        BannerIdList = BannerInfo.Warps.DistinctBy(w=>w.GachaId).Select(w=>w.GachaId).OrderDescending().ToList();
    }

    public void ResetFilterIfNoneSelected(){
        if (RaritySet.Count == 0){
            EpicFilter=true;
            LegendaryFilter=true;
        }
    }

    private Func<T, bool> CombinePredicates<T>(params Func<T, bool>[] predicates)
    {
        return x => predicates.All(predicate => predicate(x));
    }
    private void SetSelectedBannerId(int id){
        if(SelectedBannerId == id){
            SelectedBannerId = null;
        }
        else{
            SelectedBannerId = id;
        }
    }

    private string GetImageURLById(string folder, int id)
    {
        return $"images/{folder}/{id}.png";
    }

    private string GetTicketOffClass(int id){
        return (SelectedBannerId == null || SelectedBannerId == id) ? "ticket":"ticket ticket-off"; 
    }
}