@inject HttpClient Http
@inject ILogger<PatchCalendar> logger
@* @using System.Collections.Generic *@



@if(patches!=null && patches.Count>0){

    <MudCarousel Class="mud-width-full" Style="height:500px;" ShowArrows="@true" ShowBullets="@true" EnableSwipeGesture="@true" AutoCycle="@false" TData="object" @bind-SelectedIndex="selectedIndex">
        @foreach(var p in patches)
        {
            <MudCarouselItem Transition="@Transition.Fade">
                <VersionBanner title="@p.Title" version="@p.Version"></VersionBanner>
            </MudCarouselItem>
        }
    </MudCarousel>
    var selectedPatch = patches[selectedIndex];
    @* <MudContainer MaxWidth="@MaxWidth.Small"> *@

    <div class="my-6 calendar-container">
        @for(int i=0; i < selectedPatch.WeeksCount*7; i++){
            var currentDate = selectedPatch.ReleaseDate.AddDays(i);
            @* <button class="day day-@(i+1) @(currentDate < DateTime.Today?"day-disabled" : "")" @onclick="@(e => SetSelectedDate(currentDate))">
                @currentDate.ToString("dd/M", System.Globalization.CultureInfo.InvariantCulture)
                </button> *@
            var disabled = currentDate < DateTime.Today;
            var today = currentDate == DateTime.Today;
            var color_hren = "";
            if(currentDate == selectedDate){
                Console.WriteLine(currentDate.ToString());
                color_hren = Colors.Amber.Darken2;
            }
            else if(today){
                color_hren = Colors.Red.Darken1;
            }
            else if(currentDate>DateTime.Today && currentDate < selectedDate){
                color_hren = Colors.Grey.Darken3;
            }
            else{
                color_hren= Color.Tertiary.ToString();
            }
            <MudButton Style="@($"border-radius:0; background:{color_hren}")"
            Disabled="disabled" Variant="disabled ? Variant.Outlined :Variant.Filled" OnClick="@(e =>SetSelectedDate(currentDate))">
                @currentDate.ToString("dd/M", System.Globalization.CultureInfo.InvariantCulture)
            </MudButton>
        }
    </div>
    @* </MudContainer> *@
}
    @* <p>@selectedDate.ToString()</p>  *@
    <MudTextField T="DateTime" ReadOnly="@true" @bind-Value='selectedDate' Label="Выбранная дата"  />
    <MudTextField @bind-Value='stellarJadesAmountForEvents' T="int" Label="Гемов за ивенты"  />
    @* <MudTextField @bind-Value='stellarJadesAmountForEvents' T="int" Label="Дней пропуска"  /> *@
    <MudSelect T="int" Label="Звезд в зеркале" AnchorOrigin="Origin.BottomCenter" @bind-Value="mirror_stars">
        @for(int i=0; i<13;i++){
            <MudSelectItem  T="int" Value="i*3" />
        }
    </MudSelect>
    @* <MudCheckBox Value="month_pass" Label="Пропуск снабженца" Color="Color.Primary"></MudCheckBox> *@
    <MudCheckBox T="bool" Checked="@month_pass" CheckedChanged="test" Label="Пропуск снабженца" Color="Color.Primary"/>
    @* <input type="checkbox" @bind-value="@month_pass"> *@
    <MudText Typo="Typo.h5" Align="@Align.Start" Class="mx-auto">
        Итого звездного нефрита: <MudText Color="@Color.Primary" Typo="Typo.h5" Align="@Align.Start">
           <MudImage Width="24" Height="24" Src="images/stellarJade.webp"></MudImage> @(resultStellarJades) = <MudImage Width="24" Height="24" Src="images/warp.webp"></MudImage> @(resultStellarJades/240) <MudImage Width="24" Height="24" Src="images/stellarJade.webp"></MudImage> @(resultStellarJades%160) 
        </MudText>
    </MudText>
    @if(chances != null){
        <MudText Typo="Typo.h5" Align="@Align.Start" Class="mx-auto">
            Шанс @(Math.Round(chances[(resultStellarJades/160).ToString()], 2))%
        </MudText>
    }

@code{

    public void test(bool value){
        month_pass = value;
        Console.WriteLine("TEST");
    }

    public bool Basic_CheckBox1 { get; set; } = true;

    [Parameter]
    public EventCallback<int> OnSelectedDateChanged {get; set;}
    private MudCarousel<string> _carousel;
    private int selectedIndex = 0;
    private List<Patch> patchesInit {get; set;} 
    public List<Patch> patches {get; set;}
    public Dictionary<string,double> chances {get;set;}
    public bool month_pass { get; set; } = false;
    public int mirror_stars {get;set;} = 0;
    public int dailyIncom {get {
        return month_pass?150 : 60;
    }}

    public int resultStellarJades => stellarJadesAmountForEvents + mirror_stars * 20 + (selectedDate - DateTime.Today).Days * dailyIncom;

    public DateTime selectedDate {get; set;} = DateTime.Today;

    public Patch currentPatch {get; set;} = null!;
    @* public Patch selectedPatch {get;set;} = null!; //refactor *@

    public int stellarJadesAmountForEvents {get; set;} = 0;

    private async Task SetSelectedDate(DateTime date){
        if (date >= DateTime.Today){
            selectedDate=date;
            stellarJadesAmountForEvents = await Task.Run(() => calculateEventStellarJadeBySelectedDate());
            await OnSelectedDateChanged.InvokeAsync(stellarJadesAmountForEvents);  
        } 
            
        @* logger.LogInformation($"Button on calendar clicked wit date {date}"); *@
    }

    //Linked list? refactor
    private int calculateEventStellarJadeBySelectedDate(){
        var currentIndex = patches.IndexOf(currentPatch);
        @* var selectedIndex = patches.IndexOf(selectedPatch); *@
        int result = 0;
        var dateRange = new EventDateRange(DateTime.Today, selectedDate);
        //var hren = patches.SkipWhile(p=>indexRange.Contains(patches.IndexOf(p))).ToList();
        var patchRange = patches.Skip(currentIndex).SkipLast(patches.Count-selectedIndex-1);
        foreach(var patch in patchRange){
            foreach(var patchEvent in patch.Events){
                //рефактор модели ивента, посчитать через сколько дней доступны все награды
                if(dateRange.IsDateInRange(patchEvent.StartDate.AddDays(7))){ //если прошло больше недели с начала ивента и открылись все награды
                    result+=patchEvent.StellarJadesAmount;
                }
            }
        }
        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("start blazor component");
        patchesInit = await Http.GetFromJsonAsync<List<Patch>>("/api/patches") ?? new();
        chances = await Http.GetFromJsonAsync<Dictionary<string,double>>($"/predict") ?? new();
        patches = patchesInit.ToList();
        currentPatch = patches.First(p => p.ReleaseDate.AddDays(7*p.WeeksCount) > DateTime.Now);
        selectedIndex = patches.IndexOf(currentPatch);
        @* selectedPatch = currentPatch; *@
        StateHasChanged();

    }
    public int CalculateResultStallarJadeAmount(){
        return stellarJadesAmountForEvents + mirror_stars * 20 + 
        (selectedDate - DateTime.Today).Days * dailyIncom;
    }

    @* public async Task<double> predictChance(int pullsNumber){
        var chance = await Http.GetFromJsonAsync<Dictionary<string,double>>($"/predict?pulls={pullsNumber}");
        Console.WriteLine(chance["chance"]);
        return chance["chance"];
    } *@
}